// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mayachain/v1/x/mayachain/types/type_tss.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	gitlab_com_mayachain_mayanode_common "gitlab.com/mayachain/mayanode/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TssVoter struct {
	ID                           string                                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PoolPubKey                   gitlab_com_mayachain_mayanode_common.PubKey `protobuf:"bytes,2,opt,name=pool_pub_key,json=poolPubKey,proto3,casttype=gitlab.com/mayachain/mayanode/common.PubKey" json:"pool_pub_key,omitempty"`
	PubKeys                      []string                                    `protobuf:"bytes,3,rep,name=pub_keys,json=pubKeys,proto3" json:"pub_keys,omitempty"`
	BlockHeight                  int64                                       `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Chains                       []string                                    `protobuf:"bytes,5,rep,name=chains,proto3" json:"chains,omitempty"`
	Signers                      []string                                    `protobuf:"bytes,6,rep,name=signers,proto3" json:"signers,omitempty"`
	MajorityConsensusBlockHeight int64                                       `protobuf:"varint,7,opt,name=majority_consensus_block_height,json=majorityConsensusBlockHeight,proto3" json:"majority_consensus_block_height,omitempty"`
	// Skipping if we later need to add secp256k1_signatures as field number 8
	PoolPubKeyEddsa gitlab_com_mayachain_mayanode_common.PubKey `protobuf:"bytes,9,opt,name=pool_pub_key_eddsa,json=poolPubKeyEddsa,proto3,casttype=gitlab.com/mayachain/mayanode/common.PubKey" json:"pool_pub_key_eddsa,omitempty"`
}

func (m *TssVoter) Reset()      { *m = TssVoter{} }
func (*TssVoter) ProtoMessage() {}
func (*TssVoter) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4cbc7cfa3cf1093, []int{0}
}
func (m *TssVoter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TssVoter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TssVoter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TssVoter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TssVoter.Merge(m, src)
}
func (m *TssVoter) XXX_Size() int {
	return m.Size()
}
func (m *TssVoter) XXX_DiscardUnknown() {
	xxx_messageInfo_TssVoter.DiscardUnknown(m)
}

var xxx_messageInfo_TssVoter proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TssVoter)(nil), "types.TssVoter")
}

func init() {
	proto.RegisterFile("mayachain/v1/x/mayachain/types/type_tss.proto", fileDescriptor_c4cbc7cfa3cf1093)
}

var fileDescriptor_c4cbc7cfa3cf1093 = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xcd, 0x4a, 0xeb, 0x40,
	0x18, 0xcd, 0xcf, 0x6d, 0xda, 0xce, 0x2d, 0x5c, 0x18, 0x2e, 0x65, 0xee, 0x45, 0x26, 0xd5, 0x55,
	0x41, 0x6c, 0x90, 0xbe, 0x41, 0xb5, 0xa0, 0xb8, 0xd1, 0xa0, 0x2e, 0xdc, 0xc4, 0xfc, 0x0c, 0x69,
	0x6c, 0x93, 0x09, 0xf9, 0xa6, 0x62, 0x76, 0x3e, 0x81, 0xf8, 0x58, 0x5d, 0x76, 0xd9, 0x55, 0xb1,
	0xe9, 0x5b, 0xb8, 0x92, 0x4c, 0x5b, 0x5a, 0x11, 0x04, 0x37, 0xe1, 0x3b, 0xe7, 0x3b, 0x39, 0x67,
	0x38, 0x33, 0xe8, 0x28, 0x76, 0x73, 0xd7, 0x1f, 0xb8, 0x51, 0x62, 0x3d, 0x1e, 0x5b, 0x4f, 0xd6,
	0x16, 0x8a, 0x3c, 0x65, 0x20, 0xbf, 0x8e, 0x00, 0xe8, 0xa4, 0x19, 0x17, 0x1c, 0x57, 0x24, 0xfb,
	0xff, 0x6f, 0xc8, 0x43, 0x2e, 0x19, 0xab, 0x9c, 0x56, 0xcb, 0x83, 0x17, 0x1d, 0xd5, 0xae, 0x01,
	0x6e, 0xb9, 0x60, 0x19, 0x6e, 0x22, 0x2d, 0x0a, 0x88, 0xda, 0x52, 0xdb, 0xf5, 0x9e, 0x51, 0xcc,
	0x4d, 0xed, 0xfc, 0xd4, 0xd6, 0xa2, 0x00, 0x5f, 0xa1, 0x46, 0xca, 0xf9, 0xc8, 0x49, 0xc7, 0x9e,
	0x33, 0x64, 0x39, 0xd1, 0xa4, 0xc2, 0x7a, 0x9f, 0x9b, 0x87, 0x61, 0x24, 0x46, 0xae, 0xd7, 0xf1,
	0x79, 0xbc, 0x73, 0x8c, 0x72, 0x4a, 0x78, 0xc0, 0x2c, 0x9f, 0xc7, 0x31, 0x4f, 0x3a, 0x97, 0x63,
	0xef, 0x82, 0xe5, 0x36, 0x2a, 0x4d, 0x56, 0x33, 0xfe, 0x87, 0x6a, 0x6b, 0x37, 0x20, 0x7a, 0x4b,
	0x6f, 0xd7, 0xed, 0x6a, 0x2a, 0x37, 0x80, 0xf7, 0x51, 0xc3, 0x1b, 0x71, 0x7f, 0xe8, 0x0c, 0x58,
	0x14, 0x0e, 0x04, 0xf9, 0xd5, 0x52, 0xdb, 0xba, 0xfd, 0x5b, 0x72, 0x67, 0x92, 0xc2, 0x4d, 0x64,
	0xc8, 0x24, 0x20, 0x15, 0xf9, 0xef, 0x1a, 0x61, 0x82, 0xaa, 0x10, 0x85, 0x09, 0xcb, 0x80, 0x18,
	0x2b, 0xd3, 0x35, 0xc4, 0x7d, 0x64, 0xc6, 0xee, 0x03, 0xcf, 0x22, 0x91, 0x3b, 0x3e, 0x4f, 0x80,
	0x25, 0x30, 0x06, 0xe7, 0x53, 0x4e, 0x55, 0xe6, 0xec, 0x6d, 0x64, 0x27, 0x1b, 0x55, 0x6f, 0x27,
	0xf8, 0x1e, 0xe1, 0xdd, 0x26, 0x1c, 0x16, 0x04, 0xe0, 0x92, 0xba, 0xec, 0xa3, 0x3b, 0x99, 0x9b,
	0xea, 0x4f, 0x3b, 0xf9, 0xb3, 0xed, 0xa4, 0x5f, 0x7a, 0xf5, 0x6e, 0x26, 0x0b, 0xaa, 0xcc, 0x16,
	0x54, 0x79, 0x2e, 0xa8, 0x32, 0x29, 0xa8, 0x3a, 0x2d, 0xa8, 0xfa, 0x56, 0x50, 0xf5, 0x75, 0x49,
	0x95, 0xe9, 0x92, 0x2a, 0xb3, 0x25, 0x55, 0xee, 0xac, 0xef, 0x33, 0xbe, 0xbc, 0x09, 0xcf, 0x90,
	0xd7, 0xdd, 0xfd, 0x08, 0x00, 0x00, 0xff, 0xff, 0x40, 0x28, 0x02, 0x71, 0x3c, 0x02, 0x00, 0x00,
}

func (m *TssVoter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TssVoter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TssVoter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolPubKeyEddsa) > 0 {
		i -= len(m.PoolPubKeyEddsa)
		copy(dAtA[i:], m.PoolPubKeyEddsa)
		i = encodeVarintTypeTss(dAtA, i, uint64(len(m.PoolPubKeyEddsa)))
		i--
		dAtA[i] = 0x4a
	}
	if m.MajorityConsensusBlockHeight != 0 {
		i = encodeVarintTypeTss(dAtA, i, uint64(m.MajorityConsensusBlockHeight))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTypeTss(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Chains) > 0 {
		for iNdEx := len(m.Chains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Chains[iNdEx])
			copy(dAtA[i:], m.Chains[iNdEx])
			i = encodeVarintTypeTss(dAtA, i, uint64(len(m.Chains[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTypeTss(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PubKeys) > 0 {
		for iNdEx := len(m.PubKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PubKeys[iNdEx])
			copy(dAtA[i:], m.PubKeys[iNdEx])
			i = encodeVarintTypeTss(dAtA, i, uint64(len(m.PubKeys[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PoolPubKey) > 0 {
		i -= len(m.PoolPubKey)
		copy(dAtA[i:], m.PoolPubKey)
		i = encodeVarintTypeTss(dAtA, i, uint64(len(m.PoolPubKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintTypeTss(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypeTss(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypeTss(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TssVoter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTypeTss(uint64(l))
	}
	l = len(m.PoolPubKey)
	if l > 0 {
		n += 1 + l + sovTypeTss(uint64(l))
	}
	if len(m.PubKeys) > 0 {
		for _, s := range m.PubKeys {
			l = len(s)
			n += 1 + l + sovTypeTss(uint64(l))
		}
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTypeTss(uint64(m.BlockHeight))
	}
	if len(m.Chains) > 0 {
		for _, s := range m.Chains {
			l = len(s)
			n += 1 + l + sovTypeTss(uint64(l))
		}
	}
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTypeTss(uint64(l))
		}
	}
	if m.MajorityConsensusBlockHeight != 0 {
		n += 1 + sovTypeTss(uint64(m.MajorityConsensusBlockHeight))
	}
	l = len(m.PoolPubKeyEddsa)
	if l > 0 {
		n += 1 + l + sovTypeTss(uint64(l))
	}
	return n
}

func sovTypeTss(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypeTss(x uint64) (n int) {
	return sovTypeTss(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TssVoter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeTss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TssVoter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TssVoter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeTss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolPubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeTss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolPubKey = gitlab_com_mayachain_mayanode_common.PubKey(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeTss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKeys = append(m.PubKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeTss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chains = append(m.Chains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeTss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MajorityConsensusBlockHeight", wireType)
			}
			m.MajorityConsensusBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MajorityConsensusBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolPubKeyEddsa", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeTss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeTss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolPubKeyEddsa = gitlab_com_mayachain_mayanode_common.PubKey(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypeTss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypeTss
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypeTss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypeTss(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypeTss
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeTss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeTss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypeTss
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypeTss
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypeTss
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypeTss        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypeTss          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypeTss = fmt.Errorf("proto: unexpected end of group")
)
