// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mayachain/v1/x/mayachain/types/type_cacao_pool.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CACAOPool represents ownership of currently active POL.
type CACAOPool struct {
	ReserveUnits   github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,1,opt,name=reserve_units,json=reserveUnits,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"reserve_units"`
	PoolUnits      github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,2,opt,name=pool_units,json=poolUnits,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"pool_units"`
	CacaoDeposited github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,3,opt,name=cacao_deposited,json=cacaoDeposited,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"cacao_deposited"`
	CacaoWithdrawn github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,4,opt,name=cacao_withdrawn,json=cacaoWithdrawn,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"cacao_withdrawn"`
}

func (m *CACAOPool) Reset()         { *m = CACAOPool{} }
func (m *CACAOPool) String() string { return proto.CompactTextString(m) }
func (*CACAOPool) ProtoMessage()    {}
func (*CACAOPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_58dac6d722359946, []int{0}
}
func (m *CACAOPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CACAOPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CACAOPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CACAOPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CACAOPool.Merge(m, src)
}
func (m *CACAOPool) XXX_Size() int {
	return m.Size()
}
func (m *CACAOPool) XXX_DiscardUnknown() {
	xxx_messageInfo_CACAOPool.DiscardUnknown(m)
}

var xxx_messageInfo_CACAOPool proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CACAOPool)(nil), "types.CACAOPool")
}

func init() {
	proto.RegisterFile("mayachain/v1/x/mayachain/types/type_cacao_pool.proto", fileDescriptor_58dac6d722359946)
}

var fileDescriptor_58dac6d722359946 = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0xc9, 0x4d, 0xac, 0x4c,
	0x4c, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x2f, 0x33, 0xd4, 0xaf, 0xd0, 0x47, 0x70, 0x4b, 0x2a, 0x0b,
	0x52, 0x8b, 0xc1, 0x64, 0x7c, 0x72, 0x62, 0x72, 0x62, 0x7e, 0x7c, 0x41, 0x7e, 0x7e, 0x8e, 0x5e,
	0x41, 0x51, 0x7e, 0x49, 0xbe, 0x10, 0x2b, 0x58, 0x52, 0x4a, 0x24, 0x3d, 0x3f, 0x3d, 0x1f, 0x2c,
	0xa2, 0x0f, 0x62, 0x41, 0x24, 0x95, 0x9e, 0x32, 0x71, 0x71, 0x3a, 0x3b, 0x3a, 0x3b, 0xfa, 0x07,
	0xe4, 0xe7, 0xe7, 0x08, 0x85, 0x70, 0xf1, 0x16, 0xa5, 0x16, 0xa7, 0x16, 0x95, 0xa5, 0xc6, 0x97,
	0xe6, 0x65, 0x96, 0x14, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x3a, 0xe9, 0x9f, 0xb8, 0x27, 0xcf,
	0x70, 0xeb, 0x9e, 0xbc, 0x7a, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x7e,
	0x72, 0x7e, 0x71, 0x6e, 0x7e, 0x31, 0x94, 0xd2, 0x2d, 0x4e, 0xc9, 0x86, 0xb8, 0x41, 0x2f, 0x34,
	0x33, 0xaf, 0x24, 0x88, 0x07, 0x6a, 0x4a, 0x28, 0xc8, 0x10, 0x21, 0x3f, 0x2e, 0x2e, 0x90, 0x73,
	0xa0, 0x46, 0x32, 0x91, 0x67, 0x24, 0x27, 0xc8, 0x08, 0x88, 0x79, 0x11, 0x5c, 0xfc, 0x10, 0x4f,
	0xa6, 0xa4, 0x16, 0xe4, 0x17, 0x67, 0x96, 0xa4, 0xa6, 0x48, 0x30, 0x93, 0x67, 0x28, 0x1f, 0xd8,
	0x1c, 0x17, 0x98, 0x31, 0x08, 0x93, 0xcb, 0x33, 0x4b, 0x32, 0x52, 0x8a, 0x12, 0xcb, 0xf3, 0x24,
	0x58, 0x28, 0x31, 0x39, 0x1c, 0x66, 0x8c, 0x93, 0xe7, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9,
	0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e,
	0xcb, 0x31, 0x44, 0xe9, 0xa7, 0x67, 0x96, 0xe4, 0x24, 0x42, 0x8c, 0x44, 0x44, 0x28, 0x88, 0x95,
	0x97, 0x9f, 0x92, 0x8a, 0x19, 0xcb, 0x49, 0x6c, 0xe0, 0x98, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x28, 0x90, 0x1e, 0x69, 0x0e, 0x02, 0x00, 0x00,
}

func (m *CACAOPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CACAOPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CACAOPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CacaoWithdrawn.Size()
		i -= size
		if _, err := m.CacaoWithdrawn.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeCacaoPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.CacaoDeposited.Size()
		i -= size
		if _, err := m.CacaoDeposited.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeCacaoPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.PoolUnits.Size()
		i -= size
		if _, err := m.PoolUnits.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeCacaoPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.ReserveUnits.Size()
		i -= size
		if _, err := m.ReserveUnits.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeCacaoPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTypeCacaoPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypeCacaoPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CACAOPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ReserveUnits.Size()
	n += 1 + l + sovTypeCacaoPool(uint64(l))
	l = m.PoolUnits.Size()
	n += 1 + l + sovTypeCacaoPool(uint64(l))
	l = m.CacaoDeposited.Size()
	n += 1 + l + sovTypeCacaoPool(uint64(l))
	l = m.CacaoWithdrawn.Size()
	n += 1 + l + sovTypeCacaoPool(uint64(l))
	return n
}

func sovTypeCacaoPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypeCacaoPool(x uint64) (n int) {
	return sovTypeCacaoPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CACAOPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeCacaoPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CACAOPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CACAOPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeCacaoPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeCacaoPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeCacaoPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReserveUnits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeCacaoPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeCacaoPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeCacaoPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolUnits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacaoDeposited", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeCacaoPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeCacaoPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeCacaoPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CacaoDeposited.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacaoWithdrawn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeCacaoPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeCacaoPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeCacaoPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CacaoWithdrawn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypeCacaoPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypeCacaoPool
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypeCacaoPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypeCacaoPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypeCacaoPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeCacaoPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeCacaoPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypeCacaoPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypeCacaoPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypeCacaoPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypeCacaoPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypeCacaoPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypeCacaoPool = fmt.Errorf("proto: unexpected end of group")
)
