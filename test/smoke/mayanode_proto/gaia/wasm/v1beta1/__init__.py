# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: gaia/wasm/v1beta1/tx.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List, Optional

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


@dataclass(eq=False, repr=False)
class MsgExecuteContract(betterproto.Message):
    """
    MsgExecuteContract represents a message to submits the given message data
    to a smart contract.
    """

    # Sender is the that actor that signed the messages
    sender: str = betterproto.string_field(1)
    # Contract is the address of the smart contract
    contract: str = betterproto.string_field(2)
    # ExecuteMsg json encoded message to be passed to the contract
    execute_msg: bytes = betterproto.bytes_field(3)
    # Coins that are transferred to the contract on execution
    coins: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class MsgExecuteContractResponse(betterproto.Message):
    """
    MsgExecuteContractResponse defines the Msg/ExecuteContract response type.
    """

    # Data contains base64-encoded bytes to returned from the contract
    data: bytes = betterproto.bytes_field(1)


class MsgStub(betterproto.ServiceStub):
    async def execute_contract(
        self,
        *,
        sender: str = "",
        contract: str = "",
        execute_msg: bytes = b"",
        coins: Optional[List["___cosmos_base_v1_beta1__.Coin"]] = None
    ) -> "MsgExecuteContractResponse":
        coins = coins or []

        request = MsgExecuteContract()
        request.sender = sender
        request.contract = contract
        request.execute_msg = execute_msg
        if coins is not None:
            request.coins = coins

        return await self._unary_unary(
            "/gaia.wasm.v1beta1.Msg/ExecuteContract",
            request,
            MsgExecuteContractResponse,
        )


class MsgBase(ServiceBase):
    async def execute_contract(
        self,
        sender: str,
        contract: str,
        execute_msg: bytes,
        coins: Optional[List["___cosmos_base_v1_beta1__.Coin"]],
    ) -> "MsgExecuteContractResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_execute_contract(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "sender": request.sender,
            "contract": request.contract,
            "execute_msg": request.execute_msg,
            "coins": request.coins,
        }

        response = await self.execute_contract(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/gaia.wasm.v1beta1.Msg/ExecuteContract": grpclib.const.Handler(
                self.__rpc_execute_contract,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgExecuteContract,
                MsgExecuteContractResponse,
            ),
        }


from ....cosmos.base import v1beta1 as ___cosmos_base_v1_beta1__
